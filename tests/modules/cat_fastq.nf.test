nextflow_process {

    name "Test Process cat_fastq"
    script "modules/cat_fastq.nf"
    process "cat_fastq"

    test("cat_fastq concatenates fastq files -- SE reads.") {
        // instantiate helper objects
        def readsLane1 = new ReadsSELane1()
        def readsLane2 = new ReadsSELane2()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = [
                    [
                        sampleName:   "${readsLane1.getSampleName()}",
                        sampleNumber: "${readsLane1.getSampleNumber()}",
                        readType:     "${readsLane1.getReadType()}"
                    ],
                    [
                        file("${readsLane1.getR1()}"),
                        file("${readsLane2.getR1()}")
                    ],
                    []
                ]
                """
            }
        }

        then {
            // test process success
            assert process.success

            // test reads fastq files concatenated
            with(process.out.reads.get(0)) {
                assert size() == 2
                assert get(1) ==~ /^.*\/${readsLane1.getSampleName()}_R1.fastq.gz/
                assert path(get(1)).linesGzip.size() == 400000
            }

            // test reproducibility
            assert snapshot(process.out).match()
        }

    }

    test("cat_fastq concatenates fastq files -- PE reads") {
        // instantiate helper objects
        def readsLane1 = new ReadsPELane1()
        def readsLane2 = new ReadsPELane2()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = [
                    [
                        sampleName:   "${readsLane1.getSampleName()}",
                        sampleNumber: "${readsLane1.getSampleNumber()}",
                        readType:     "${readsLane1.getReadType()}"
                    ],
                    [
                        file("${readsLane1.getR1()}"),
                        file("${readsLane2.getR1()}")
                    ],
                    [
                        file("${readsLane1.getR2()}"),
                        file("${readsLane2.getR2()}")
                    ]
                ]
                """
            }
        }

        then {
            // test process success
            assert process.success

            // test reads fastq files concatenated
            with(process.out.reads.get(0)) {
                assert size() == 2
                assert get(1).get(0) ==~ /^.*\/${readsLane1.getSampleName()}_R1.fastq.gz/
                assert path(get(1).get(0)).linesGzip.size() == 400000
                assert get(1).get(1) ==~ /^.*\/${readsLane1.getSampleName()}_R2.fastq.gz/
                assert path(get(1).get(1)).linesGzip.size() == 400000
            }

            // test reproducibility
            assert snapshot(process.out).match()
        }

    }

}
