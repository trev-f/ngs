nextflow_workflow {

    name "Test Workflow Cat_Reads"
    script "subworkflows/cat_reads.nf"
    workflow "Cat_Reads"

    test("Cat_Reads concatenates reads -- SE reads.") {
        // instantiate helper objects
        def readsLane1 = new ReadsSELane1()
        def readsLane2 = new ReadsSELane2()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "${readsLane1.getSampleName()}",
                            sampleNumber: "${readsLane1.getSampleNumber()}",
                            lane:         "${readsLane1.getLane()}",
                            readType:     "${readsLane1.getReadType()}"
                        ],
                        [
                            file("${readsLane1.getR1()}")
                        ]
                    ],
                    [
                        [
                            sampleName:   "${readsLane2.getSampleName()}",
                            sampleNumber: "${readsLane2.getSampleNumber()}",
                            lane:         "${readsLane2.getLane()}",
                            readType:     "${readsLane2.getReadType()}"
                        ],
                        [
                            file("${readsLane2.getR1()}")
                        ]
                    ]
                )
                """
            }
        }

        then {
            // test workflow success
            assert workflow.success

            // test reads fastq files concatenated
            with(workflow.out.reads_catted.get(0)) {
                assert size() == 2
                assert get(1) ==~ /^.*\/${readsLane1.getSampleName()}_R1.fastq.gz/
                assert path(get(1)).linesGzip.size() == 400000
            }

            // test reproducibility
            assert snapshot(workflow.out).match()
        }

    }

    test("Cat_Reads concatenates reads -- PE reads.") {
        // instantiate helper objects
        def readsLane1 = new ReadsPELane1()
        def readsLane2 = new ReadsPELane2()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "${readsLane1.getSampleName()}",
                            sampleNumber: "${readsLane1.getSampleNumber()}",
                            lane:         "${readsLane1.getLane()}",
                            readType:     "${readsLane1.getReadType()}"
                        ],
                        [
                            file("${readsLane1.getR1()}"),
                            file("${readsLane1.getR2()}")
                        ]
                    ],
                    [
                        [
                            sampleName:   "${readsLane2.getSampleName()}",
                            sampleNumber: "${readsLane2.getSampleNumber()}",
                            lane:         "${readsLane2.getLane()}",
                            readType:     "${readsLane2.getReadType()}"
                        ],
                        [
                            file("${readsLane2.getR1()}"),
                            file("${readsLane2.getR2()}")
                        ]
                    ]
                )
                """
            }
        }

        then {
            // test workflow success
            assert workflow.success

            // test reads fastq files concatenated
            with(workflow.out.reads_catted.get(0)) {
                assert size() == 2
                assert get(1).get(0) ==~ /^.*\/${readsLane1.getSampleName()}_R1.fastq.gz/
                assert path(get(1).get(0)).linesGzip.size() == 400000
                assert get(1).get(1) ==~ /^.*\/${readsLane1.getSampleName()}_R2.fastq.gz/
                assert path(get(1).get(1)).linesGzip.size() == 400000
            }

            // test reproducibility
            assert snapshot(workflow.out).match()
        }

    }

    test("Cat_Reads concatenates reads in lexicographic order -- PE reads.") {
        // instantiate helper objects
        def readsLane1 = new ReadsPELane1()
        def readsLane2 = new ReadsPELane2()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "${readsLane1.getSampleName()}",
                            sampleNumber: "${readsLane1.getSampleNumber()}",
                            lane:         "${readsLane1.getLane()}",
                            readType:     "${readsLane1.getReadType()}"
                        ],
                        [
                            file("${readsLane1.getR1()}"),
                            file("${readsLane1.getR2()}")
                        ]
                    ],
                    [
                        [
                            sampleName:   "${readsLane2.getSampleName()}",
                            sampleNumber: "${readsLane2.getSampleNumber()}",
                            lane:         "${readsLane2.getLane()}",
                            readType:     "${readsLane2.getReadType()}"
                        ],
                        [
                            file("${readsLane2.getR1()}"),
                            file("${readsLane2.getR2()}")
                        ]
                    ]
                )
                """
            }
        }

        then {
            // test workflow success
            assert workflow.success

            // test reads fastq files concatenated
            with(workflow.out.reads_catted.get(0)) {
                assert size() == 2
                assert get(1).get(0) ==~ /^.*\/${readsLane1.getSampleName()}_R1.fastq.gz/
                assert path(get(1).get(0)).linesGzip.size() == 400000
                assert get(1).get(1) ==~ /^.*\/${readsLane1.getSampleName()}_R2.fastq.gz/
                assert path(get(1).get(1)).linesGzip.size() == 400000
            }

            // test reproducibility
            assert snapshot(workflow.out).match()
        }

    }

}
